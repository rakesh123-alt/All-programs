import random

# Constants
PLAYER_X = "X"
PLAYER_O = "O"
EMPTY = " "

# Game board setup
def print_board(board):
    for i in range(3):
        print("|".join(board[i]))
        if i < 2:
            print("-" * 5)

# Check for a win
def check_win(board, player):
    for row in board:
        if row.count(player) == 3:
            return True
    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)):
        return True
    if all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

# Check for a tie
def check_tie(board):
    return all(board[i][j] != EMPTY for i in range(3) for j in range(3))

# Get available moves
def available_moves(board):
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == EMPTY]

# Minimax algorithm
def minimax(board, depth, is_maximizing, alpha, beta):
    if check_win(board, PLAYER_X):
        return 10 - depth
    if check_win(board, PLAYER_O):
        return depth - 10
    if check_tie(board):
        return 0
    
    if is_maximizing:
        max_eval = float("-inf")
        for move in available_moves(board):
            board[move[0]][move[1]] = PLAYER_X
            eval = minimax(board, depth + 1, False, alpha, beta)
            board[move[0]][move[1]] = EMPTY
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = float("inf")
        for move in available_moves(board):
            board[move[0]][move[1]] = PLAYER_O
            eval = minimax(board, depth + 1, True, alpha, beta)
            board[move[0]][move[1]] = EMPTY
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval

# Best move for AI (Minimax)
def best_move(board):
    max_eval = float("-inf")
    move = None
    for (i, j) in available_moves(board):
        board[i][j] = PLAYER_X
        eval = minimax(board, 0, False, float("-inf"), float("inf"))
        board[i][j] = EMPTY
        if eval > max_eval:
            max_eval = eval
            move = (i, j)
    return move

# Human player move
def human_move(board):
    while True:
        try:
            row, col = map(int, input("Enter your move (row col): ").split())
            if board[row][col] == EMPTY:
                return row, col
            else:
                print("Cell is already occupied, try again.")
        except (ValueError, IndexError):
            print("Invalid input. Please enter row and col as two integers between 0 and 2.")

# Main game loop
def play_game():
    board = [[EMPTY] * 3 for _ in range(3)]
    current_player = PLAYER_X
    while True:
        print_board(board)
        if current_player == PLAYER_X:
            row, col = best_move(board)
            print(f"AI plays at {row} {col}")
        else:
            row, col = human_move(board)
        
        board[row][col] = current_player
        
        if check_win(board, current_player):
            print_board(board)
            print(f"{current_player} wins!")
            break
        if check_tie(board):
            print_board(board)
            print("It's a tie!")
            break
        
        current_player = PLAYER_O if current_player == PLAYER_X else PLAYER_X

# Start the game
if __name__ == "__main__":
    play_game()
